// Load More Functionality
console.log('üîß LoadMore.js ƒë√£ ƒë∆∞·ª£c load');

document.addEventListener('DOMContentLoaded', function () {
    console.log('üöÄ LoadMore.js ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');

    const offsets = {};
    const limitPerLoad = 3;

    const buttons = document.querySelectorAll(".see-more-btn");
    console.log('üìã T√¨m th·∫•y', buttons.length, 'n√∫t "xem th√™m"');

    buttons.forEach((btn, index) => {
        const parentId = btn.getAttribute('data-parent');
        const targetId = btn.getAttribute('data-target');

        console.log(`üîç N√∫t ${index + 1}: parentId="${parentId}", targetId="${targetId}"`);

        if (!parentId || !targetId) {
            console.error("‚ùå N√∫t thi·∫øu data-parent ho·∫∑c data-target:", btn);
            return;
        }

        if (!(parentId in offsets)) {
            offsets[parentId] = 6;
        }

        btn.addEventListener("click", function (e) {
            e.preventDefault();

            const offset = offsets[parentId];
            console.log(`üñ±Ô∏è B·∫•m n√∫t: parentId=${parentId}, offset=${offset}`);

            btn.disabled = true;
            btn.innerHTML = "ƒêang t·∫£i...";

            const url = `loadMoreFeatured?offset=${offset}&parentId=${parentId}&limit=${limitPerLoad}`;
            console.log('üåê G·ª≠i request ƒë·∫øn:', url);

            fetch(url)
                .then(response => {
                    console.log('üì° Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.text();
                })
                .then(html => {
                    console.log('üìÑ Response length:', html.length);
                    console.log('üìÑ Response preview:', html.substring(0, 100));

                    if (html && html.trim() !== '' && html !== 'error') {
                        const container = document.getElementById(targetId);
                        if (container) {
                            container.insertAdjacentHTML('beforeend', html);
                            offsets[parentId] += limitPerLoad;
                            console.log('‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m th√†nh c√¥ng, offset m·ªõi:', offsets[parentId]);

                            if (window.ecomartsCart && typeof window.ecomartsCart.setupCartButtons === 'function') {
                                console.log('üõí Kh·ªüi t·∫°o l·∫°i cart functionality');
                                window.ecomartsCart.setupCartButtons();
                            }
                        } else {
                            console.error('‚ùå Kh√¥ng t√¨m th·∫•y container:', targetId);
                        }

                        checkMoreProducts(parentId, btn);
                    } else {
                        console.log('üì≠ Kh√¥ng c√≤n s·∫£n ph·∫©m ƒë·ªÉ load');
                        btn.disabled = true;
                        btn.innerHTML = "Kh√¥ng c√≤n s·∫£n ph·∫©m";
                        btn.style.opacity = "0.5";
                    }
                })
                .catch(error => {
                    console.error('‚ùå L·ªói fetch:', error);
                    btn.disabled = false;
                    btn.innerHTML = "Xem th√™m s·∫£n ph·∫©m <i class=\"fas fa-arrow-right\"></i>";
                });
        });
    });

    function checkMoreProducts(parentId, btn) {
        const nextOffset = offsets[parentId];
        console.log('üîç Ki·ªÉm tra c√≤n s·∫£n ph·∫©m kh√¥ng, offset:', nextOffset);

        fetch(`loadMoreFeatured?offset=${nextOffset}&parentId=${parentId}&limit=1`)
            .then(response => response.text())
            .then(html => {
                if (html && html.trim() !== '' && html !== 'error') {
                    console.log('‚úÖ C√≤n s·∫£n ph·∫©m ƒë·ªÉ load');
                    btn.disabled = false;
                    btn.innerHTML = "Xem th√™m s·∫£n ph·∫©m <i class=\"fas fa-arrow-right\"></i>";
                    btn.style.opacity = "1";
                } else {
                    console.log('üì≠ Kh√¥ng c√≤n s·∫£n ph·∫©m');
                    btn.disabled = true;
                    btn.innerHTML = "Kh√¥ng c√≤n s·∫£n ph·∫©m";
                    btn.style.opacity = "0.5";
                }
            })
            .catch(error => {
                console.error('‚ùå L·ªói ki·ªÉm tra s·∫£n ph·∫©m:', error);
                btn.disabled = false;
                btn.innerHTML = "Xem th√™m s·∫£n ph·∫©m <i class=\"fas fa-arrow-right\"></i>";
            });
    }
}); 